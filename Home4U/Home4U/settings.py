"""
Django settings for Home4U project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
import os
from pathlib import Path
import dj_database_url
import os
import cloudinary
from dotenv import load_dotenv
load_dotenv()
#from dotenv import load_dotenv


OTP_LIMIT_TRY = 3

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY','django-insecure-)^4y*&7o&-evc(k62#*3gr4lzz0@89#fnew7u=)wjhii5m-x^!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True") == "True"


ALLOWED_HOSTS = ['*', "2906-105-112-203-225.ngrok-free.app", "127.0.0.1",
                 "https://home4u-3.onrender.com"]

# load_dotenv()


FLW_SECRET_KEY = 'FLWSECK_TEST-be112cfcacb4bd6e592aa49b64d7b5b4-X'
FLW_PUBLIC_KEY = 'FLWPUBK_TEST-a014eea4344fe9761cfe15b6f352fbbc-X'
FLW_API_URL = "https://api.flutterwave.com/v3"
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'cloudinary',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    #custom apps
    'accounts',
    'payments',
    'contents',
    #third party packages
    'drf_yasg',
    'drf_spectacular_sidecar',
    'drf_spectacular',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'rest_framework',
    'whitenoise.runserver_nostatic'
]

REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    # ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Your Project API',
    'DESCRIPTION': 'Your project description',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}


SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=150),  # Fix
    'REFRESH_TOKEN_LIFETIME': timedelta(days=4),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}



if not FLW_SECRET_KEY:
    raise ValueError("FLW_SECRET_KEY is missing from .env")

secret_key = os.environ.get("FLW_SECRET_KEY", "FLWSECK_TEST-be112cfcacb4bd6e592aa49b64d7b5b4-X")
if not secret_key:
    raise ValueError("Error loading the FLW_SECRET_KEY from .env file")
    
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Or your SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'aliyahsulaiman3@gmail.com'
EMAIL_HOST_PASSWORD = 'otyd hdzx efag wlem'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.common.CommonMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Home4U.urls'

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost"
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS



CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-csrftoken",
    "ngrok-skip-browser-warning"
    # add other headers if needed
]

CORS_ALLOW_CREDENTIALS = True

VERCEL_APP_URL = "https://home4u-jet.vercel.app"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'Templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'Home4U.wsgi.application'


# DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://home4u_user:Vn6hY6hb5YXbg4O7rWe7zFvVgQx0IzM9@dpg-cv9a21in91rc73d8lnqg-a.oregon-postgres.render.com/home4u").decode("utf-8") if isinstance(os.getenv("DATABASE_URL", "postgresql://home4u_user:Vn6hY6hb5YXbg4O7rWe7zFvVgQx0IzM9@dpg-cv9a21in91rc73d8lnqg-a.oregon-postgres.render.com/home4u"), bytes) else os.getenv("DATABASE_URL", "postgresql://home4u_user:Vn6hY6hb5YXbg4O7rWe7zFvVgQx0IzM9@dpg-cv9a21in91rc73d8lnqg-a.oregon-postgres.render.com/home4u")
ENVIRONMENT_VARIABLE = True
POSTGRESS = True

database_url = os.environ.get('DATABASE_URL')
if database_url:
    database_url = database_url.strip()  # Remove extra spaces/newlines
    database_url = database_url.decode("utf-8") if isinstance(database_url, bytes) else database_url

if not database_url:
    raise ValueError("DATABASE_URL is not set. Please check your environment variables.")



if ENVIRONMENT_VARIABLE and POSTGRESS == True:
     DATABASES ={
        "default": dj_database_url.parse(os.environ.get('DATABASE_URL'))
                }

else:
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'Home4U',
                'USER': 'postgres',
                'PASSWORD': 'MrNote11',
                'HOST': 'localhost',
                'PORT': '5432',
                'OPTIONS': {
                    'sslmode': 'require'  # ⚠️ This line is essential
                }
        }
    }
            
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# if not DEBUG:

    



# DATABASES['default'] = dj_database_url.parse("postgresql://home4u_user:Vn6hY6hb5YXbg4O7rWe7zFvVgQx0IzM9@dpg-cv9a21in91rc73d8lnqg-a.oregon-postgres.render.com/home4u")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static Files Configuration
STATIC_URL = '/static/'  # URL prefix for static files
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Development static folder
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Collects static files for production

# Media Files Configuration (For Uploaded Images)
MEDIA_URL = '/media/'  # URL prefix for media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Directory to store uploaded files




if POSTGRESS and ENVIRONMENT_VARIABLE == True:
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    
else:
    MEDIA_URL = '/media/'



# CLOUD_API_NAME = os.environ.get('dtmw6jgue')
# CLOUD_API_KEY = os.environ.get('887834964485546')
# CLOUD_API_SECRET = os.environ.get('h1vYbJJa-s_qabXBx7vi4dCYiUc')

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUD_API_NAME'),
    'API_KEY': os.getenv('CLOUD_API_KEY'),
    'API_SECRET': os.getenv('CLOUD_API_SECRET')
}

FLW_SECRET_HASH = os.getenv("FLW_SECRET_HASH")
print(FLW_SECRET_HASH)

cloudinary.config(
    cloud_name=CLOUDINARY_STORAGE['CLOUD_NAME'],
    api_key=CLOUDINARY_STORAGE['API_KEY'],
    api_secret=CLOUDINARY_STORAGE['API_SECRET']
)


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use database for sessions
SESSION_COOKIE_NAME = 'mysessionid'  # Custom session name
SESSION_COOKIE_AGE = 86400  # 1 day
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request
